
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Complete(

		//////////// CLOCK //////////
		input 	     ADC_CLK_10,
		input 	     MAX10_CLK1_50,
		input 	     MAX10_CLK2_50,

		//////////// SEG7 //////////
		output [7:0] HEX0,
		output [7:0] HEX1,
		output [7:0] HEX2,
		output [7:0] HEX3,
		output [7:0] HEX4,
		output [7:0] HEX5,

		//////////// KEY //////////
		input [1:0]  KEY,

		//////////// LED //////////
		output [9:0] LEDR,

		//////////// SW //////////
		input [9:0]  SW
		);



   //=======================================================
   //  REG/WIRE declarations
   //=======================================================

   wire 		     one_hz_clk;
   wire 		     two_hz_clk;
   wire 		     out_hz_clk;
   wire 		     clk_sel;
   wire [3:0] 		     lsd;
   wire [3:0] 		     msd;
   wire 		     reset_n;
   wire 		     latch;
   wire 		     ms_off;

   wire [6:0] 		     cnt;
   

   
   
   assign LEDR[1] = out_hz_clk;
   assign LEDR[0] = reset_n;
   
   //=======================================================
   //  Structural coding
   //=======================================================

   
   latch_key L1 (
		 .KEY (KEY[0]),
		 .R (reset_n)
		 );
   

   latch_key LClk (
		  .KEY (KEY[1]),
		  .R (clk_sel)
		  );
   
   
   clock_div_1hz Clk1 (
		     .reset_n (reset_n),
		     .src_clk (ADC_CLK_10),
		     .out_clk (one_hz_clk)
		     );
			  
			  
   clock_div_2hz Clk2 (
		     .reset_n (reset_n),
		     .src_clk (ADC_CLK_10),
		     .out_clk (two_hz_clk)
		     );
			  
			  
   clock_mux ClMx (
		 .a(one_hz_clk),
		 .b(two_hz_clk),
		 .sel(clk_sel),
		 .out(out_hz_clk)
		 );
		 
   
   bcd_counter BCD (
		   .reset_n (reset_n),
		   .src_clk (out_hz_clk),
		   .msd_out (msd),
		   .cnt_out (cnt),
		   .lsd_out (lsd)
		   );
   
   
   month_day MD (
		 .count(cnt),
		 .leap_year(SW[9]),
		 .HEX0(HEX0),
		 .HEX1(HEX1),
		 .HEX2(HEX2)
		 );

   hex_driver X3 (
		  .NUM(4'b0000),
		  .HEX(HEX3),
		  .OFF(1'b1)
		  );
   
   hex_driver X4 (
		  .NUM(lsd),
		  .HEX(HEX4)
		  );
   
   
   hex_driver X5 (
		  .NUM(msd),
		  .HEX(HEX5),
		  .OFF(1'b1)
		  );
   
endmodule
